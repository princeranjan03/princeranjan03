Exp 2 :

HALF ADDER

`timescale 1ns / 1ps

module Half_adder(
    input A,
    input B,
    output Sum,
    output Carry
    );
    
    assign Sum = A^B;
    assign Carry = A&B;
endmodule   


Test Bench :

`timescale 1ns / 1ps

module Half_adder_TB();

 reg A,B;
 wire Sum,Carry;
 
 Half_adder uut(A,B,Sum,Carry);
 
 initial begin
 
    A=0;B=0;
    #10 A=0;B=1;
     #10 A=1;B=0;
      #10 A=1;B=1;
       #10 $finish;
 
 end
endmodule



Behavioural : 

`timescale 1ns / 1ps

module Half_Adder(
    input A,
    input B,
    output reg Sum,
    output reg Carry
    
    
    );
  
            always@ *
                begin
                    case({A,B})
                                            2'b00: begin
                                            Sum = 0;
                                            Carry = 0;
                                            end
                                            
                                               2'b01: begin
                                            Sum = 1;
                                            Carry = 0;
                                            end
                                             
                                
                                             2'b10: begin
                                            Sum = 1;
                                            Carry = 0;
                                            end 
                                                                                  
                                            2'b11: begin
                                             Sum = 0;
                                             Carry = 1;
                                             end            
                    endcase
                end

endmodule
