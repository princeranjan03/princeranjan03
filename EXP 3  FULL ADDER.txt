EXP 3 : FULL ADDER

`timescale 1ns / 1ps


module full_adder(
    input A,
    input B,
    input Cin,
    inout sum1,
    inout Finalsum,
    inout carry1,
    inout Finalcarry,
    output carry2
    
    );
    
    
    assign sum1 = A^B;
    assign carry1 = A&B;
    assign Finalsum = sum1^Cin;
    assign carry2 = sum1&Cin;
    assign Finalcarry = carry1|carry2;
    
endmodule


TB : 

`timescale 1ns / 1ps


module full_adder_tb();

    reg A,B,Cin ;
    wire Finalcarry,carry2,sum1,Finalsum,carry1;

full_adder uut (A,B,Cin,sum1,Finalsum,carry1,Finalcarry,carry2);

    initial begin
    
    
            A=0;B=0;Cin=0;
        #10 A=0;B=0;Cin=1;
        #10 A=0;B=1;Cin=0;
        #10 A=0;B=1;Cin=1;
        #10 A=1;B=0;Cin=0;
        #10 A=1;B=0;Cin=1;
        #10 A=1;B=1;Cin=0;
        #10 A=1;B=1;Cin=1;
        #10 $finish;
    
    end

endmodule


Behavioural :

`timescale 1ns / 1ps

module full_adder_behavioural(
    input  A,
    input B,
    input  Cin,
    output reg sum,
    output reg carry
    );
    
    
    
    always@ *
        begin
        
                case({A,B,Cin})
                                    3'b000 : begin
                                        sum   =0;
                                        carry =0;
                                    end
                                    
                                    3'b001 : begin
                                          sum   =1;
                                          carry =0;                              
                                    end
                                    
                                    3'b010 : begin
                                          sum   =1;
                                          carry =0;                            
                                    end
                                    
                                    3'b011 : begin
                                          sum   =0;
                                          carry =1;                              
                                    end
                                    
                                     3'b100 : begin
                                          sum   =1;
                                          carry =0;                                                                
                                     end
                                     
                                     3'b101 : begin
                                           sum   =0;
                                           carry =1;                              
                                     end
                                     
                                     3'b110: begin
                                            sum   =0;
                                            carry =1;                           
                                     end
                                     
                                     3'b111 : begin
                                             sum   =1;
                                             carry =1;                            
                                     end                              
                       endcase              
                end
endmodule

