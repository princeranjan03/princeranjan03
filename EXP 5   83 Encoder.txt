EXP 5 :  8:3 Encoder

`timescale 1ns / 1ps


module encoder(
    input y0,
    input y1,
    input y2,
    input y3,
    input y4,
    input y5,
    input y6,
    input y7,
    output A,
    output B,
    output C
    );
    
    
    
    
    assign A = y4 | y5 | y6 | y7;
    assign B = y2 | y3 | y6 | y7;
    assign C = y1 | y3 | y5 | y7;
    
    
    
    
endmodule


TB : 

`timescale 1ns / 1ps

module encoder_tb();
    
    reg y0,y1,y2,y3,y4,y5,y6,y7;
    wire A,B,C;
    
    encoder_behavioral uut(y0,y1,y2,y3,y4,y5,y6,y7,A,B,C);
    
    
    initial begin 
    
       y0=1;y1=0;y2=0;y3=0;y4=0;y5=0;y6=0;y7=0;
    #10 y0=0;y1=1;y2=0;y3=0;y4=0;y5=0;y6=0;y7=0;   
    #10 y0=0;y1=0;y3=0;y4=0;y5=0;y6=0;y7=0;y2=1;
    #10 y0=0;y1=0;y2=0;y4=0;y5=0;y6=0;y7=0;y3=1;
    #10 y0=0;y1=0;y2=0;y3=0;y5=0;y6=0;y7=0;y4=1;
    #10 y0=0;y1=0;y2=0;y3=0;y4=0;y6=0;y7=0;y5=1;
    #10 y0=0;y1=0;y2=0;y3=0;y4=0;y5=0;y7=0;y6=1;
    #10 y0=0;y1=0;y2=0;y3=0;y4=0;y5=0;y6=0;y7=1;
    
    #10 $finish;
    
    end



endmodule


BEhaviorual :

`timescale 1ns / 1ps

module encoder_behavioral (
    input y0,
    input y1,
    input y2,
    input y3,
    input y4,
    input y5,
    input y6,
    input y7,
    output reg A,
    output reg B,
    output reg C
);

always @* begin

    if (y7 == 1) 
    begin
        A = 1;
        B = 1;
        C = 1;
    end
    else if (y6 == 1) 
    begin
        A = 1;
        B = 1;
        C = 0;
    end 
    else if (y5 == 1) 
    begin
        A = 1;
        B = 0;
        C = 1;
    end 
    else if (y4 == 1) 
    begin
        A = 1;
        B = 0;
        C = 0;
    end 
    else if (y3 == 1) 
    begin
        A = 0;
        B = 1;
        C = 1;
    end 
    else if (y2 == 1) 
    begin
        A = 0;
        B = 1;
        C = 0;
    end 
    else if (y1 == 1) 
    begin
        A = 0;
        B = 0;
        C = 1;
    end 
    else begin
        A = 0;
        B = 0;
        C = 0;
    end
end

endmodule
